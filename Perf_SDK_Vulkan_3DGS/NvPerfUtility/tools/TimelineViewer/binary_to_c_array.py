# Copyright 2014-2025 NVIDIA Corporation.  All rights reserved.
# 
# NOTICE TO USER:
# 
# This source code is subject to NVIDIA ownership rights under U.S. and
# international Copyright laws.
# 
# This software and the information contained herein is PROPRIETARY and
# CONFIDENTIAL to NVIDIA and is being provided under the terms and conditions
# of a form of NVIDIA software license agreement.
# 
# NVIDIA MAKES NO REPRESENTATION ABOUT THE SUITABILITY OF THIS SOURCE
# CODE FOR ANY PURPOSE.  IT IS PROVIDED "AS IS" WITHOUT EXPRESS OR
# IMPLIED WARRANTY OF ANY KIND.  NVIDIA DISCLAIMS ALL WARRANTIES WITH
# REGARD TO THIS SOURCE CODE, INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY, NONINFRINGEMENT, AND FITNESS FOR A PARTICULAR PURPOSE.
# IN NO EVENT SHALL NVIDIA BE LIABLE FOR ANY SPECIAL, INDIRECT, INCIDENTAL,
# OR CONSEQUENTIAL DAMAGES, OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS
# OF USE, DATA OR PROFITS,  WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE
# OR OTHER TORTIOUS ACTION,  ARISING OUT OF OR IN CONNECTION WITH THE USE
# OR PERFORMANCE OF THIS SOURCE CODE.
# 
# U.S. Government End Users.   This source code is a "commercial item" as
# that term is defined at  48 C.F.R. 2.101 (OCT 1995), consisting  of
# "commercial computer  software"  and "commercial computer software
# documentation" as such terms are  used in 48 C.F.R. 12.212 (SEPT 1995)
# and is provided to the U.S. Government only as a commercial end item.
# Consistent with 48 C.F.R.12.212 and 48 C.F.R. 227.7202-1 through
# 227.7202-4 (JUNE 1995), all U.S. Government End Users acquire the
# source code with only those rights set forth herein.
# 
# Any use of this source code in individual and commercial software must
# include, in the user documentation and internal comments to the code,
# the above Disclaimer and U.S. Government End Users Notice.
import argparse
import os

def binary_file_to_c_array(input_file_path, output_file_path, array_name):
    try:
        with open(input_file_path, "rb") as binary_file:
            data = binary_file.read()

        line_width = 16
        hex_lines = []
        for i in range(0, len(data), line_width):
            chunk = data[i : i + line_width]
            hex_line = ", ".join("0x{:02x}".format(byte) for byte in chunk)
            hex_lines.append(hex_line)

        hex_str = ",\n        ".join(hex_lines)
        this_file = os.path.basename(__file__)
        content = f"""
/*
* Copyright 2014-2025 NVIDIA Corporation.  All rights reserved.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

// This file is auto-generated by {this_file}, please refrain from making manual modifications.


#include <cstddef>

namespace nv {{ namespace perf {{ namespace tool {{

    extern const unsigned char {array_name}[] = {{
        {hex_str} }};

    extern const size_t {array_name}_size = sizeof({array_name});

}} }} }}  // nv::perf::tool
"""
        # Write the C array to the output file
        with open(output_file_path, "w") as output_file:
            output_file.write(content)

    except IOError as e:
        print(f"Error: {e}")

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Convert a binary file to a C array.")

    parser.add_argument("--input_path", type=str, required = True, help="The path to the input binary file.")
    parser.add_argument("--output_path", type=str, required = True, help="The path to the output C file.")
    parser.add_argument("--array_name", type=str, required = True, help="The name of the C array.")
    args = parser.parse_args()

    binary_file_to_c_array(args.input_path, args.output_path, args.array_name)
